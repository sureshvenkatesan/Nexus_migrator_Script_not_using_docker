Below example takes a Nexus machine of below credentials. Hence replace the details with that of your nexus machine

URL : http://10.90.173.97:8081
Username : admin
password : password


Deploy script API
-----------------

curl -X 'POST' \
  'http://10.90.173.97:8081/service/rest/v1/script' \
  -H 'accept: application/json' \
  -H 'Content-Type: application/json' \
  -u admin:password \
  -d '{"content":"import groovy.json.JsonBuilder\nimport org.sonatype.nexus.security.user.UserSearchCriteria\nimport org.apache.shiro.authz.permission.*\n\ndef getRepoData() {\n    def repoman = container.lookup('\''org.sonatype.nexus.repository.manager.RepositoryManager'\'')\n    def repolist = []\n    for (repo in repoman.browse()) {\n        def repoitem = [:], configitem = [:]\n        repoitem.type = repo.type.value\n        repoitem.format = repo.format.value\n        repoitem.name = repo.name\n        repoitem.url = repo.url\n        def config = repo.configuration\n        configitem.name = config.repositoryName\n        configitem.recipe = config.recipeName\n        configitem.online = config.isOnline()\n        configitem.attributes = config.attributes\n        repoitem.config = configitem\n        repolist \u003c\u003c repoitem\n    }\n    return repolist\n}\n\ndef getBlobstoreData() {\n    def blobman = container.lookup('\''org.sonatype.nexus.blobstore.api.BlobStoreManager'\'')\n    def blobstorelist = []\n    for (blobstore in blobman.browse()) {\n        def blobstoreitem = [:]\n        def config = blobstore.blobStoreConfiguration\n        blobstoreitem.name = config.name\n        blobstoreitem.type = config.type\n        blobstoreitem.attributes = config.attributes\n        blobstorelist \u003c\u003c blobstoreitem\n    }\n    return blobstorelist\n}\n\ndef getUserData() {\n    def secsys = container.lookup('\''org.sonatype.nexus.security.SecuritySystem'\'')\n    def userlist = []\n    for (user in secsys.searchUsers(new UserSearchCriteria())) {\n        def useritem = [:], rolesitems = []\n        useritem.id = user.userId\n        useritem.firstname = user.firstName\n        useritem.lastname = user.lastName\n        useritem.email = user.emailAddress\n        useritem.source = user.source\n        for (role in user.roles) {\n            def roleitem = [:]\n            roleitem.id = role.roleId\n            roleitem.source = role.source\n            rolesitems \u003c\u003c roleitem\n        }\n        useritem.roles = rolesitems\n        useritem.status = user.status.name()\n        useritem.readonly = user.isReadOnly()\n        useritem.version = user.version\n        userlist \u003c\u003c useritem\n    }\n    return userlist\n}\n\ndef getGroupData() {\n    def secsys = container.lookup('\''org.sonatype.nexus.security.SecuritySystem'\'')\n    def grouplist = []\n    for (group in secsys.listRoles()) {\n        def groupitem = [:]\n        groupitem.id = group.roleId\n        groupitem.name = group.name\n        groupitem.source = group.source\n        groupitem.roles = group.roles\n        groupitem.privileges = group.privileges\n        groupitem.description = group.description\n        groupitem.readonly = group.readOnly\n        groupitem.version = group.version\n        grouplist \u003c\u003c groupitem\n    }\n    return grouplist\n}\n\ndef getPermissionData() {\n    def secsys = container.lookup('\''org.sonatype.nexus.security.SecuritySystem'\'')\n    def permlist = []\n    for (perm in secsys.listPrivileges()) {\n        def permitem = [:]\n        permitem.id = perm.id\n        permitem.name = perm.name\n        permitem.description = perm.description\n        permitem.type = perm.type\n        permitem.properties = perm.properties\n        permitem.readonly = perm.isReadOnly()\n        permitem.version = perm.version\n        permitem.perm = perm.permission.parts\n        permlist \u003c\u003c permitem\n    }\n    return permlist\n}\n\ndef getSelectorData() {\n    def selman = container.lookup('\''org.sonatype.nexus.selector.SelectorManager'\'')\n    def sellist = []\n    if (selman == null) return sellist\n    for (sel in selman.browse()) {\n        def selitem = [:]\n        selitem.name = sel.name\n        selitem.type = sel.type\n        selitem.description = sel.description\n        selitem.attributes = sel.attributes\n        sellist \u003c\u003c selitem\n    }\n    return sellist\n}\n\ndef getLdapData() {\n    def confman = container.lookup('\''org.sonatype.nexus.ldap.persist.LdapConfigurationManager'\'')\n    def conflist = []\n    for (conf in confman.listLdapServerConfigurations()) {\n        def confitem = [:]\n        confitem.id = conf.id\n        confitem.name = conf.name\n        confitem.order = conf.order\n        confitem.searchBase = conf.connection.searchBase\n        confitem.systemUsername = conf.connection.systemUsername\n        confitem.systemPassword = conf.connection.systemPassword\n        confitem.authScheme = conf.connection.authScheme\n        confitem.useTrustStore = conf.connection.useTrustStore\n        confitem.saslRealm = conf.connection.saslRealm\n        confitem.connectionTimeout = conf.connection.connectionTimeout\n        confitem.connectionRetryDelay = conf.connection.connectionRetryDelay\n        confitem.maxIncidentsCount = conf.connection.maxIncidentsCount\n        confitem.protocol = conf.connection.host.protocol.name()\n        confitem.hostName = conf.connection.host.hostName\n        confitem.port = conf.connection.host.port\n        confitem.emailAddressAttribute = conf.mapping.emailAddressAttribute\n        confitem.ldapGroupsAsRoles = conf.mapping.ldapGroupsAsRoles\n        confitem.groupBaseDn = conf.mapping.groupBaseDn\n        confitem.groupIdAttribute = conf.mapping.groupIdAttribute\n        confitem.groupMemberAttribute = conf.mapping.groupMemberAttribute\n        confitem.groupMemberFormat = conf.mapping.groupMemberFormat\n        confitem.groupObjectClass = conf.mapping.groupObjectClass\n        confitem.userPasswordAttribute = conf.mapping.userPasswordAttribute\n        confitem.userIdAttribute = conf.mapping.userIdAttribute\n        confitem.userObjectClass = conf.mapping.userObjectClass\n        confitem.ldapFilter = conf.mapping.ldapFilter\n        confitem.userBaseDn = conf.mapping.userBaseDn\n        confitem.userRealNameAttribute = conf.mapping.userRealNameAttribute\n        confitem.userSubtree = conf.mapping.userSubtree\n        confitem.groupSubtree = conf.mapping.groupSubtree\n        confitem.userMemberOfAttribute = conf.mapping.userMemberOfAttribute\n        conflist \u003c\u003c confitem\n    }\n    return conflist\n}\n\ndef getData() {\n    def data = [:]\n    if (false) {\n        data.users = []\n        data.groups = []\n        data.privs = []\n        data.selectors = []\n        data.ldaps = []\n    } else {\n        data.users = userData\n        data.groups = groupData\n        data.privs = permissionData\n        data.selectors = selectorData\n        data.ldaps = ldapData\n    }\n    data.repos = repoData\n    data.blobstores = blobstoreData\n    return new JsonBuilder(data).toPrettyString()\n}\n\nreturn data\n","name":"jfrogclimigrator","type":"groovy"}' -vv


Run API
-------

  curl -X 'POST' \
  'http://10.90.173.97:8081/service/rest/v1/script/jfrogclimigrator/run' \
  -H 'accept: application/json' \
  -H 'Content-Type: text/plain' \
  -d 'string' \
  -u admin:password -vv


Delete API
----------

  curl -X 'DELETE' \
  'http://10.90.173.97:8081/service/rest/v1/script/jfrogclimigrator' \
  -H 'accept: application/json' \
  -u admin:password -vv